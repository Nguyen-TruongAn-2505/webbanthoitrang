package com.cizaya.admin.user;

import java.io.IOException;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.cizaya.admin.FileUploadUtil;
import com.cizaya.common.entity.Role;
import com.cizaya.common.entity.User;
import org.springframework.util.StringUtils;

@Controller
public class UserController {

	@Autowired
	private UserService service;

	// load ra list user theo duong link /users
	@GetMapping("/users")
	public String listAll(Model model) {
		List<User> listUsers = service.listAll();
		model.addAttribute("listUsers", listUsers);

		return "user";
	}

	// load ra thong tin de them moi theo duong link /users/new
	@GetMapping("/users/new")
	public String newUser(Model model) {
		List<Role> listRoles = service.listRoles();
		User user = new User();
		user.setEnabled(true);
		model.addAttribute("user", user);
		model.addAttribute("listRoles", listRoles);
		model.addAttribute("pageTitle", "Create New User");
		return "user_form";
	}

	// luu thong tin vao db theo duong link users/save
	@PostMapping("/users/save")

	public String saveUser(User user, RedirectAttributes redirectAttributes,
			@RequestParam("image") MultipartFile multipartFile) throws IOException {

		System.out.println(user);
		System.out.println(multipartFile.getOriginalFilename());
		String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
		String uploadDir = "user-photos";

		FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
		service.save(user);
		redirectAttributes.addFlashAttribute("message", "The user has bean saved successfully");
		return "redirect:/users";
	}

	// hien thi form update theo id
	@GetMapping("/users/edit/{id}")
	public String editUser(@PathVariable(name = "id") Integer id, Model model, RedirectAttributes redirectAttributes) {
		try {
			List<Role> listRoles = service.listRoles();
			User user = service.get(id);
			model.addAttribute("user", user);
			model.addAttribute("pageTitle", "Edit User (ID:" + id + ")");
			model.addAttribute("listRoles", listRoles);
			return "user_form";
		} catch (UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}

	}

	// xoa theo id
	@GetMapping("/users/delete/{id}")
	public String deleteUser(@PathVariable(name = "id") Integer id, Model model,
			RedirectAttributes redirectAttributes) {
		try {
			service.delete(id);
			redirectAttributes.addFlashAttribute("message", "The user ID" + id + "has bean deleted successfully");
			return "redirect:/users";
		} catch (UserNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
			return "redirect:/users";
		}
	}

	// vo hieu hoa trang thai
	@GetMapping("/users/{id}/enabled/{status}")
	public String updateUserEnabledStatus(@PathVariable("id") Integer id, @PathVariable("status") boolean enabled,
			RedirectAttributes redirectAttributes) {
		service.updateUserEnbledStatus(id, enabled);
		String status = enabled ? "enabled" : "disabled";
		String mesagess = "The user ID " + id + "has been " + status;
		redirectAttributes.addFlashAttribute("message", mesagess);

		return "redirect:/users";
	}

}
